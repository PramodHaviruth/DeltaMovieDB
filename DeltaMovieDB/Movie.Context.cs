//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeltaMovieDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DeltaMovieDBEntities : DbContext
    {
        public DeltaMovieDBEntities()
            : base("name=DeltaMovieDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Actor> Actors { get; set; }
        public DbSet<ActorMovie> ActorMovies { get; set; }
        public DbSet<Movie> Movies { get; set; }
        public DbSet<Producer> Producers { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int InsertMovieDetails(string name, Nullable<int> yearOfRelease, string plot, byte[] poster, Nullable<int> producerId, ObjectParameter movieId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var yearOfReleaseParameter = yearOfRelease.HasValue ?
                new ObjectParameter("YearOfRelease", yearOfRelease) :
                new ObjectParameter("YearOfRelease", typeof(int));
    
            var plotParameter = plot != null ?
                new ObjectParameter("Plot", plot) :
                new ObjectParameter("Plot", typeof(string));
    
            var posterParameter = poster != null ?
                new ObjectParameter("Poster", poster) :
                new ObjectParameter("Poster", typeof(byte[]));
    
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMovieDetails", nameParameter, yearOfReleaseParameter, plotParameter, posterParameter, producerIdParameter, movieId);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int InsertActorDetails(string name, string sex, Nullable<System.DateTime> dOB, string bio)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var bioParameter = bio != null ?
                new ObjectParameter("Bio", bio) :
                new ObjectParameter("Bio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertActorDetails", nameParameter, sexParameter, dOBParameter, bioParameter);
        }
    
        public virtual int InsertProducerDetails(string name, string sex, Nullable<System.DateTime> dOB, string bio)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var bioParameter = bio != null ?
                new ObjectParameter("Bio", bio) :
                new ObjectParameter("Bio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProducerDetails", nameParameter, sexParameter, dOBParameter, bioParameter);
        }
    
        public virtual ObjectResult<GetActorsList_Result> GetActorsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActorsList_Result>("GetActorsList");
        }
    
        public virtual ObjectResult<GetProducersList_Result> GetProducersList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProducersList_Result>("GetProducersList");
        }
    
        public virtual int InsertActorMovieDetails(Nullable<int> actorId, Nullable<int> movieId)
        {
            var actorIdParameter = actorId.HasValue ?
                new ObjectParameter("ActorId", actorId) :
                new ObjectParameter("ActorId", typeof(int));
    
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("MovieId", movieId) :
                new ObjectParameter("MovieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertActorMovieDetails", actorIdParameter, movieIdParameter);
        }
    
        public virtual ObjectResult<GetActorsinMovieList_Result> GetActorsinMovieList(Nullable<int> movieId)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("MovieId", movieId) :
                new ObjectParameter("MovieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActorsinMovieList_Result>("GetActorsinMovieList", movieIdParameter);
        }
    
        public virtual ObjectResult<GetMoviesList_Result> GetMoviesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMoviesList_Result>("GetMoviesList");
        }
    
        public virtual int UpdateMovieDetails(Nullable<int> movieId, string name, Nullable<int> yearOfRelease, string plot, byte[] poster, Nullable<int> producerId)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("MovieId", movieId) :
                new ObjectParameter("MovieId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var yearOfReleaseParameter = yearOfRelease.HasValue ?
                new ObjectParameter("YearOfRelease", yearOfRelease) :
                new ObjectParameter("YearOfRelease", typeof(int));
    
            var plotParameter = plot != null ?
                new ObjectParameter("Plot", plot) :
                new ObjectParameter("Plot", typeof(string));
    
            var posterParameter = poster != null ?
                new ObjectParameter("Poster", poster) :
                new ObjectParameter("Poster", typeof(byte[]));
    
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMovieDetails", movieIdParameter, nameParameter, yearOfReleaseParameter, plotParameter, posterParameter, producerIdParameter);
        }
    }
}
